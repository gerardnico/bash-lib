#!/bin/bash
# @name docgen documentation
# @brief A script that will generate documentation from a bash library or script
# @description
#     With this script, you can generate bash documentation for a library or for a script
#     Check the usage:
#     * in the [help](#help) section
#     * or with its option `-h`
#

set -Eeuo pipefail
source bashlib-echo.sh
source bashlib-error.sh
error::set_trap
source bashlib-script.sh
source bashlib-path.sh



function print_usage(){
  man "$(basename $0)"
}

# @internal
# @description Check if the file is a bash script or library and generate the documentation or skip it
# @arg $1 the file
function bash_lib_to_markdown(){

  echo::info "Processing Bash Lib $TYPE $FILE"
  # Delete the extension if any
  NAME=$(basename "$FILE" | sed 's/\.sh$//')
  # Generate the doc
  OUTPUT_FILE="$LIB_DOC_DIR"/"$NAME".md
  shdoc < "$FILE" > "$OUTPUT_FILE"
  # Add a help section from script usage
#  if [ $TYPE == "script" ]; then
#    if [[ ! -x "$FILE" ]]; then
#      echo::err "The script file ($FILE) is not executable"
#      exit 1
#    fi
#    if ! HELP=$(eval "$FILE -h"); then
#      if ! HELP=$(eval "$FILE help"); then
#        echo::err "The script file ($FILE) has not a help option (-h) or a command (help)"
#        exit 1
#      fi
#    fi
#    {
#      echo ""
#      echo "## Help"
#      echo ""
#      echo "$HELP"
#    } >> "$OUTPUT_FILE"
#  fi
  echo::success "Processed Bash $TYPE to $OUTPUT_FILE"
  echo "$OUTPUT_FILE"

}


if ! command -v shdoc &> /dev/null; then
  echo:err "'shdoc' command not found. Please install it first."
  echo:err ""
  echo:err "    brew install gerardnico/tap/shdoc"
  exit 1
fi


DOC_DIR="docs"
declare -a BASH_DIRS=()
while [[ $# -gt 0 ]]; do
  case "$1" in
  "-o"|"--output")
    shift
    DOC_DIR="$1"
    ;;
  "-h"|"--help"|"help")
    print_usage
    exit
    ;;
  *)
    # Command or arg
    BASH_DIRS+=("$1")
    shift
    ;;
  esac
done

# Default bash dir values
if [ ${#BASH_DIRS[@]} -eq 0 ]; then
  if [ -d "lib" ]; then
    BASH_DIRS+=("lib");
  fi
  if [ -d "bin" ]; then
    BASH_DIRS+=("bin");
  fi
  if [ ${#BASH_DIRS[@]} -eq 0 ]; then
    print_usage
    echo::err "No lib or bin directories found, set the bash directories to process as argument or change of directory"
    exit 1
  fi
fi

# Check bash dir directories
for BASH_DIR in "${BASH_DIRS[@]}" ; do
  if [ ! -d "$BASH_DIR" ]; then
      print_usage
      echo::err "Error: Bash dir '$BASH_DIR' is not a valid directory."
      exit 1
  fi
done

# Check doc dir directory
if [ ! -d "$DOC_DIR" ]; then
    print_usage
    echo::err "Error: '$DOC_DIR' is not a valid directory."
    exit 1
fi

# Delete all docs
# If a bin or lib was deleted, the doc should also be deleted
LIB_DOC_DIR="$DOC_DIR/lib"
mkdir -p "$LIB_DOC_DIR"
rm -rf "$LIB_DOC_DIR"/*.md
BIN_DOC_DIR="$DOC_DIR/bin"

# Type of file
LIBRARY_TYPE="library"
SCRIPT_TYPE="script"

# Processing
for BASH_DIR in "${BASH_DIRS[@]}" ; do
  for FILE in "$BASH_DIR"/*; do
    if [ -d "$FILE" ]; then
      echo::info "Skipped directory $FILE"
      continue
    fi
    EXTENSION=$(path::get_extension "$FILE")
    case "$EXTENSION" in
      "sh")
        TYPE="$LIBRARY_TYPE"
      ;;
      "")
        if ! script::has_shebang "$FILE"; then
          echo::info "No Shebang found. Skipped file $FILE"
          continue
        fi
        TYPE="$SCRIPT_TYPE"
      ;;
      *)
        echo::info "Skipped file $FILE (not a bash file)"
        continue
    esac
    NAME=$(path::get_file_name_without_extension "$FILE")
    case $TYPE in
      "$LIBRARY_TYPE")
        OUTPUT_FILE=$(bash_lib_to_markdown "$FILE")
        # Generate a pandoc ready file
        # Example Markdown Pandoc
        # https://eddieantonio.ca/blog/2015/12/18/authoring-manpages-in-markdown-with-pandoc/
        # https://raw.githubusercontent.com/eddieantonio/imgcat/refs/heads/master/docs/imgcat.1.md
        # Pandoc Metadata starts with %
        # https://pandoc.org/MANUAL.html#metadata-blocks
        TITLE=$NAME
        sed -i \
          -e 's/^## Overview$/## DESCRIPTION/' \
          -e "1i\% $NAME(1) Version Latest | $TITLE" \
          "$OUTPUT_FILE"
          ;;
      "$SCRIPT_TYPE")
        # Markdown file are created manually
        # the file should exist
        BIN_MD_FILE="$BIN_DOC_DIR/$NAME.md"
        if [ ! -f "$BIN_MD_FILE" ]; then
          echo::err "The file $BIN_MD_FILE was not found"
          exit 1
        fi
        ;;
    esac
  done
done


MAN_1_DOC_DIR="$DOC_DIR/man/man1"
mkdir -p "$MAN_1_DOC_DIR"
# To man page
for DOC_FILE in "$BIN_DOC_DIR"/*.md; do

  echo::info "Processing man page for $DOC_FILE"
  NAME=$(path::get_file_name_without_extension "$DOC_FILE")
  MAN_FILE="$MAN_1_DOC_DIR/$NAME.1"

  pandoc "$DOC_FILE" -s -t man > "$MAN_FILE"
  sudo install -m 0644 "$MAN_FILE" /usr/share/man/man1
  echo::success "Man page $MAN_FILE created and installed"

done

echo::info "Updating the man db index"
sudo mandb > /dev/null 2>&1
echo::success "Man db index updated"

